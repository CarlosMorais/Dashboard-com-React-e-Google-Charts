{"version":3,"sources":["dashboard.js","serviceWorker.js","index.js"],"names":["Dashboard","TITULO","ANIMACAO","duration","easing","startup","useState","dados","setDados","useEffect","intervalId","setInterval","dadosGraficos","map","linha","Number","isInteger","Math","floor","random","alterarDados","clearInterval","width","height","chartType","data","options","title","is3D","pieHole","chartArea","hAxis","vAxis","animation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAwGeA,MApGf,WAEE,IAAMC,EAAS,4CACTC,EAAW,CAAEC,SAAU,IAAMC,OAAQ,MAAOC,SAAS,GAHxC,EAKOC,mBAAS,CACjC,CAAC,SAAO,cACR,CAAC,UAAW,IACZ,CAAC,YAAa,IACd,CAAC,WAAS,IACV,CAAC,QAAS,IACV,CAAC,OAAQ,IACT,CAAC,QAAS,MAZO,mBAKZC,EALY,KAKLC,EALK,KAiCnB,OAlBAC,qBAAU,WAWR,IAAMC,EAAaC,aAAY,kBAV/B,WACE,IAAMC,EAAgBL,EAAMM,KAAI,SAAAC,GAI9B,OAHIC,OAAOC,UAAUF,EAAM,MACzBA,EAAM,GAAKG,KAAKC,MAAsB,IAAhBD,KAAKE,WAEtBL,KAETN,EAASI,GAG0BQ,KAAgB,KAErD,OAAO,WACLC,cAAcX,MAEf,CAACH,IAGF,6BACE,yCACA,kBAAC,IAAD,CACEe,MAAO,QACPC,OAAQ,QACRC,UAAW,WACXC,KAAMlB,EACNmB,QAAS,CACPC,MAAO1B,KAEX,kBAAC,IAAD,CACEqB,MAAO,QACPC,OAAQ,QACRC,UAAW,WACXC,KAAMlB,EACNmB,QAAS,CACPC,MAAO1B,EACP2B,MAAM,KAEV,kBAAC,IAAD,CACEN,MAAO,QACPC,OAAQ,QACRC,UAAW,WACXC,KAAMlB,EACNmB,QAAS,CACPC,MAAO1B,EACP4B,QAAS,MAEb,kBAAC,IAAD,CACEP,MAAO,QACPC,OAAQ,QACRC,UAAW,WACXC,KAAMlB,EACNmB,QAAS,CACPC,MAAO1B,EACP6B,UAAW,CAAER,MAAO,OACpBS,MAAO,CAAEJ,MAAO,cAChBK,MAAO,CAAEL,MAAO,UAChBM,UAAW/B,KAEf,kBAAC,IAAD,CACEoB,MAAO,QACPC,OAAQ,QACRC,UAAW,YACXC,KAAMlB,EACNmB,QAAS,CACPC,MAAO1B,EACP8B,MAAO,CAAEJ,MAAO,UAChBK,MAAO,CAAEL,MAAO,cAChBM,UAAW/B,KAEf,kBAAC,IAAD,CACEoB,MAAO,QACPC,OAAQ,QACRC,UAAW,YACXC,KAAMlB,EACNmB,QAAS,CACPC,MAAO1B,EACP8B,MAAO,CAAEJ,MAAO,UAChBK,MAAO,CAAEL,MAAO,cAChBM,UAAW/B,OCtFDgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2faea5f4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './dashboard.css';\nimport Chart from 'react-google-charts';\n\nfunction Dashboard() {\n\n  const TITULO = 'Quantidade de cadastros primeiro semestre';\n  const ANIMACAO = { duration: 1000, easing: 'out', startup: true };\n\n  const [dados, setDados] = useState([\n    ['Mês', 'Quantidade'],\n    ['Janeiro', 33],\n    ['Fevereiro', 68],\n    ['Março', 49],\n    ['Abril', 15],\n    ['Maio', 80],\n    ['Junho', 27]\n  ]);\n\n  useEffect(() => {\n    function alterarDados() {\n      const dadosGraficos = dados.map(linha => {\n        if (Number.isInteger(linha[1])) {\n          linha[1] = Math.floor(Math.random() * 101);\n        }\n        return linha;\n      });\n      setDados(dadosGraficos);\n    }\n\n    const intervalId = setInterval(() => alterarDados(), 5000);\n\n    return () => {\n      clearInterval(intervalId);\n    }\n  }, [dados]);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Chart\n        width={'400px'}\n        height={'300px'}\n        chartType={'PieChart'}\n        data={dados}\n        options={{\n          title: TITULO\n        }} />\n      <Chart\n        width={'400px'}\n        height={'300px'}\n        chartType={'PieChart'}\n        data={dados}\n        options={{\n          title: TITULO,\n          is3D: true\n        }} />\n      <Chart\n        width={'400px'}\n        height={'300px'}\n        chartType={'PieChart'}\n        data={dados}\n        options={{\n          title: TITULO,\n          pieHole: 0.4\n        }} />\n      <Chart\n        width={'400px'}\n        height={'300px'}\n        chartType={'BarChart'}\n        data={dados}\n        options={{\n          title: TITULO,\n          chartArea: { width: '50%' },\n          hAxis: { title: 'Quantidade' },\n          vAxis: { title: 'Mês' },\n          animation: ANIMACAO\n        }} />\n      <Chart\n        width={'400px'}\n        height={'300px'}\n        chartType={'LineChart'}\n        data={dados}\n        options={{\n          title: TITULO,\n          hAxis: { title: 'Mês'},\n          vAxis: { title: 'Quantidade' },\n          animation: ANIMACAO\n        }} />\n      <Chart\n        width={'400px'}\n        height={'300px'}\n        chartType={'AreaChart'}\n        data={dados}\n        options={{\n          title: TITULO,\n          hAxis: { title: 'Mês' },\n          vAxis: { title: 'Quantidade' },\n          animation: ANIMACAO\n        }} />\n    </div>\n  );\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}